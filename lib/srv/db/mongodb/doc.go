/*
Copyright 2021 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package mongodb implements database access proxy that handles authentication,
// authorization and protocol parsing of connections from MongoDB clients to
// MongoDB clusters.
//
// After accepting a connection from a MongoDB client and authorizing it, the
// proxy dials to the target MongoDB cluster, performs x509 authentication and
// starts relaying wire messages between client and server.
//
// Server selection
// ================
// When connecting to a MongoDB replica set, the proxy will establish connection
// to the server determined by the "readPreference" setting from the config's
// connection string.
//
// For example, this configuration will make Teleport to connect to a secondary:
//
//  - name: "mongo-rs"
//    protocol: "mongodb"
//    uri: "mongodb://mongo1:27017,mongo2:27017/?replicaSet=rs0&readPreference=secondary"
//
// Command authorization
// =====================
// Each MongoDB command is executed in a particular database. Client commands
// going through the proxy are inspected and their database is checked against
// user role's "db_names".
//
// In case of authorization failure the command is not passed to the server,
// instead an "access denied" error is sent back to the MongoDB client in the
// standard wire message error format.

// TODO(gabrielcorado): move to a docs page, or RFD.
// CosmosDB MongoDB API support.
// =============================
//
// CosmosDB MongoDB API does not support Mongo users, instead it uses
// Azure Active Directory (AAD) users (preview feature). To login to a CosmosDB
// MongoDB API database, the user must be created in AAD and then granted access
// to the database. This is done by creating a role in the database with the
// appropriate permissions.
//
// If we don't use the RBAC feature, we can use the default database user
// `admin` to login to the database. This user has the `root` role, which
// grants all permissions to the database. This is the same as logging in using
// the database master key.
//
// ## Integration with RBAC feature (preview) and Azure AD.
//
// ### Setup
// 1. Users need to setup an app registration or execute Teleport on an
//    environment with managed identity enabled (such as Azure VMs).
// 2. Users need to grant the app registration or managed identities the Azure
//    Cosmos DB Account role.
//
// After these steps, the app registration or managed identity will be able to
// create/update the user definiions in the database.
//
// ### Implementation
//
// The implementation will be similar to the GCP MySQL/PostgreSQL integration.
// Where for each login, a new password is generated for the specified user, and
// Teleport logs in using that password.
//
// To do this, we are going to use the preview API
// (UpdateOrCreateUserDefinition), this API takes a username, password, roles
// and the database where:
// - username: is the username provided during the login/connect comamnds;
// - password: is a random password generated by Teleport;
// - roles: will contain the built-in `readWrite` role (which the user the right
//   to perform any read/write);
// - database: is the database provided during the login/connect commands;
//
// ## References
// - https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction
// - https://docs.microsoft.com/en-us/azure/cosmos-db/managed-identity-based-authentication
// - https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb/how-to-setup-rbac
package mongodb
